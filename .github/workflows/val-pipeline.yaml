---
name: Reusable workflow for the validation pipeline

on:
  workflow_call:
    inputs:
      cran:
        description: 'CRAN repository'
        required: false
        default: 'https://packagemanager.rstudio.com/cran/__linux__/focal/latest'
        type: string
      target:
        description: 'Name of the target package'
        required: true
        default: 'buckbeak'
        type: string
      report_pkg_dir:
        description: "Path to target package's root"
        required: false
        default: '.'
        type: string

jobs:
  dependencies-matrix:
    runs-on: ubuntu-latest
    name: Create the matrix of dependencies
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout ${{ inputs.target }}
        uses: actions/checkout@v3

      - id: set-matrix
        run: |
          {
            echo 'matrix<<EOF'
            echo "$(cat ./tests/packages/${{ inputs.target }}/pkgs_cran.json)"
            echo EOF
          } >> "$GITHUB_OUTPUT"
          cat $GITHUB_OUTPUT

  val-pipeline-dependencies:
    needs: dependencies-matrix
    runs-on: ubuntu-latest
    name: Validation outputs for dependencies
    container:
      image: rocker/verse:4.1.2
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_ACTION_PATH: .
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        dependency: ${{ fromJson(needs.dependencies-matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set R options
        run: |
            echo 'options(
                repos = "${{ inputs.cran }}", Ncpus = 2, crayon.enabled = TRUE
              )' >> ~/.Rprofile

      - name: Set up R library
        run: |
            mkdir -p ./R_LIBS_USER
            echo '.libPaths("./R_LIBS_USER")' >> ~/.Rprofile

      - name: Download dependency
        run: |
            R -q -e 'remotes_url <- "${{ inputs.cran }}/src/contrib/Archive/remotes/remotes_2.4.2.tar.gz";
                     install.packages(remotes_url, repos = NULL, type = "source",
                       dependencies = c("Depends", "Imports"),
                       INSTALL_opts = c("--no-docs", "--clean", "--no-multiarch",
                         "--no-data", "--no-help", "--no-demo")
                     );
                     library(remotes);
                     archive_dep <- download_version(
                       "${{ matrix.dependency.name }}",
                       version = "${{ matrix.dependency.version }}",
                       type = "source"
                     );
                     untar(archive_dep, exdir = "./_dep/")'
             
      - name: Get path to dependency
        id: get-dep-path
        run: echo "dep-path=$(echo $PWD/_dep/${{ matrix.dependency.name }})\n" >> $GITHUB_OUTPUT

      - name: Generate validation report for ${{ matrix.dependency.name }}
        id: validation
        uses: ./
        env:
          GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
        with:
          report_pkg_dir: ${{ steps.get-dep-path.outputs.dep-path }}
          report_output_prefix: ${{ inputs.target }}-${{ matrix.dependency.name }}-${{ matrix.dependency.version }}-validation-report

      - name: Upload ${{ matrix.dependency.name }} validation report
        uses: actions/upload-artifact@v2
        if: success()
        with:
          name: ${{ matrix.dependency.name }} validation report
          path: ${{ steps.validation.outputs.report_output_filename }}
          if-no-files-found: error

  val-pipeline-target:
    runs-on: ubuntu-latest
    name: Validation output for target package
    container:
      image: rocker/verse:4.1.2
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_ACTION_PATH: .
    strategy:
      fail-fast: false
      max-parallel: 2
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Generate validation report for ${{ inputs.target }}
        id: validation
        uses: ./
        env:
          GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
        with:
          report_pkg_dir: ${{ inputs.report_pkg_dir }}
          report_output_prefix: validation_report

      - name: Upload ${{ inputs.target }} validation report
        uses: actions/upload-artifact@v2
        if: success()
        with:
          name: ${{ inputs.target }} validation report
          path: ${{ steps.validation.outputs.report_output_filename }}
          if-no-files-found: error
